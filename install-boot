#!/bin/bash

# =================================================================
# Installer Otomatis Hokage-BOT
# Dibuat untuk Ubuntu 20.04/22.04/24.04 & Debian 11/12
# =================================================================

# Warna untuk output agar lebih menarik
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# --- FUNGSI UTAMA ---

# Fungsi untuk membersihkan layar dan menampilkan header
showHeader() {
    clear
    echo -e "${GREEN}=====================================================${NC}"
    echo -e "${GREEN}==     Selamat Datang di Installer Hokage-BOT      ==${NC}"
    echo -e "${GREEN}=====================================================${NC}"
    echo
}

# 1. Memeriksa apakah script dijalankan sebagai root
checkRoot() {
    if [ "$(id -u)" -ne 0 ]; then
        echo -e "${RED}Error: Script ini harus dijalankan sebagai root.${NC}"
        echo "Silakan coba lagi dengan 'sudo ./installer.sh'"
        exit 1
    fi
}

# 2. Update sistem dan instalasi dependensi
installDependencies() {
    echo -e "${YELLOW}> Mengupdate sistem dan menginstal paket yang dibutuhkan...${NC}"
    apt-get update > /dev/null 2>&1
    apt-get install -y python3 python3-pip python3-venv sqlite3 git > /dev/null 2>&1
    echo -e "${GREEN}  ‚úì Dependensi berhasil diinstal.${NC}"
    echo
}

# 3. Meminta token bot dari pengguna
promptForToken() {
    echo -e "${YELLOW}Silakan masukkan Token Bot Anda dari @BotFather:${NC}"
    read -p "> " BOT_TOKEN
    if [ -z "$BOT_TOKEN" ]; then
        echo -e "${RED}Error: Token Bot tidak boleh kosong.${NC}"
        exit 1
    fi
    echo
}

# 4. Setup user dan direktori bot
setupEnvironment() {
    echo -e "${YELLOW}> Menyiapkan lingkungan bot...${NC}"
    # Membuat user sistem tanpa password dan tanpa home dir default
    useradd -r -s /bin/false hokageuser 2>/dev/null || true
    
    # Menentukan direktori bot
    BOT_DIR="/opt/hokage-bot"
    mkdir -p $BOT_DIR

    # Membuat file-file bot menggunakan 'Here Document'
    
    # hokage.py
    cat <<EOF > ${BOT_DIR}/hokage.py
import logging
from telegram.ext import Application, CommandHandler, MessageHandler, filters
import database
import handlers

BOT_TOKEN = "${BOT_TOKEN}"

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def main() -> None:
    database.init_db()
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", handlers.start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.unknown_command))
    logger.info("Hokage-BOT mulai berjalan...")
    application.run_polling()

if __name__ == "__main__":
    main()
EOF

    # database.py
    cat <<EOF > ${BOT_DIR}/database.py
import sqlite3, logging
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
DATABASE_FILE = "${BOT_DIR}/hokage_store.db"

def init_db():
    try:
        conn = sqlite3.connect(DATABASE_FILE)
        cursor = conn.cursor()
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            first_name TEXT NOT NULL,
            role TEXT NOT NULL DEFAULT 'user',
            balance INTEGER NOT NULL DEFAULT 0,
            created_at DATETIME NOT NULL
        )
        ''')
        conn.commit()
        logging.info("Database berhasil diinisialisasi.")
    except sqlite3.Error as e:
        logging.error(f"Error saat inisialisasi database: {e}")
    finally:
        if conn: conn.close()

def add_user(telegram_id: int, first_name: str, username: str = None):
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (telegram_id,))
    if cursor.fetchone():
        conn.close()
        return
    try:
        current_time = datetime.now()
        cursor.execute(
            "INSERT INTO users (telegram_id, first_name, username, created_at) VALUES (?, ?, ?, ?)",
            (telegram_id, first_name, username, current_time)
        )
        conn.commit()
        logging.info(f"User baru ditambahkan: {first_name} (ID: {telegram_id})")
    except sqlite3.Error as e:
        logging.error(f"Error saat menambahkan user: {e}")
    finally:
        conn.close()
EOF

    # keyboards.py
    cat <<EOF > ${BOT_DIR}/keyboards.py
from telegram import ReplyKeyboardMarkup

main_menu_keyboard = [
    ["üõí Beli Layanan", "üë§ Akun Saya"],
    ["üí∞ Cek Saldo", "‚ûï Top Up Saldo"],
    ["‚ÑπÔ∏è Bantuan"]
]
MAIN_MENU_MARKUP = ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=False)

admin_menu_keyboard = [
    ["üìä Dashboard", "üë• Manajemen User"],
    ["‚öôÔ∏è Pengaturan Layanan"],
    ["(Kembali ke Menu User)"]
]
ADMIN_MENU_MARKUP = ReplyKeyboardMarkup(admin_menu_keyboard, resize_keyboard=True)
EOF

    # handlers.py
    cat <<EOF > ${BOT_DIR}/handlers.py
from telegram import Update
from telegram.ext import ContextTypes
import database
import keyboards

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    database.add_user(telegram_id=user.id, first_name=user.first_name, username=user.username)
    welcome_text = f"Selamat datang di *Hokage-BOT*, {user.first_name}!\n\nSilakan pilih menu di bawah ini."
    await update.message.reply_text(welcome_text, parse_mode='Markdown', reply_markup=keyboards.MAIN_MENU_MARKUP)

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Maaf, saya tidak mengerti perintah itu.")
EOF

    echo -e "${GREEN}  ‚úì File bot berhasil dibuat.${NC}"

    # Setup Python virtual environment
    python3 -m venv ${BOT_DIR}/venv
    source ${BOT_DIR}/venv/bin/activate
    pip install python-telegram-bot --upgrade > /dev/null 2>&1
    deactivate
    echo -e "${GREEN}  ‚úì Lingkungan Python (venv) dan library berhasil disiapkan.${NC}"

    # Set ownership
    chown -R hokageuser:hokageuser $BOT_DIR
    echo -e "${GREEN}  ‚úì Kepemilikan file diatur ke user 'hokageuser'.${NC}"
    echo
}

# 5. Membuat systemd service
createService() {
    echo -e "${YELLOW}> Membuat layanan systemd untuk bot...${NC}"
    cat <<EOF > /etc/systemd/system/hokage-bot.service
[Unit]
Description=Hokage-BOT Telegram Service
After=network.target

[Service]
User=hokageuser
Group=hokageuser
WorkingDirectory=/opt/hokage-bot
ExecStart=/opt/hokage-bot/venv/bin/python3 hokage.py
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF
    echo -e "${GREEN}  ‚úì File service 'hokage-bot.service' berhasil dibuat.${NC}"
    echo
}

# 6. Menjalankan bot
startBot() {
    echo -e "${YELLOW}> Mengaktifkan dan menjalankan bot...${NC}"
    systemctl daemon-reload
    systemctl enable hokage-bot.service > /dev/null 2>&1
    systemctl start hokage-bot.service
    echo -e "${GREEN}  ‚úì Bot berhasil diaktifkan dan dijalankan.${NC}"
    echo
}

# --- EKSEKUSI SCRIPT ---

main() {
    showHeader
    checkRoot
    installDependencies
    promptForToken
    setupEnvironment
    createService
    startBot
    
    echo -e "${GREEN}=====================================================${NC}"
    echo -e "${GREEN}==         INSTALASI HOKAGE-BOT SELESAI!         ==${NC}"
    echo -e "${GREEN}=====================================================${NC}"
    echo
    echo -e "Bot Anda sekarang berjalan di latar belakang."
    echo -e "Untuk memeriksa status bot, gunakan perintah:"
    echo -e "${YELLOW}systemctl status hokage-bot${NC}"
    echo
    echo -e "Untuk melihat log bot secara real-time, gunakan:"
    echo -e "${YELLOW}journalctl -u hokage-bot -f${NC}"
    echo
    echo -e "Jangan lupa untuk menjadikan diri Anda admin secara manual jika diperlukan."
    echo
}

main
